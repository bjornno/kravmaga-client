
package kravmaga.generated.bookingservice;

import java.util.List;
import javax.jws.WebMethod;
import javax.jws.WebParam;
import javax.jws.WebResult;
import javax.jws.WebService;
import javax.xml.bind.annotation.XmlSeeAlso;
import javax.xml.datatype.XMLGregorianCalendar;
import javax.xml.ws.RequestWrapper;
import javax.xml.ws.ResponseWrapper;


/**
 * This class was generated by the JAX-WS RI.
 * JAX-WS RI 2.1.7-b01-
 * Generated source version: 2.1
 * 
 */
@WebService(name = "BookingServiceSoap", targetNamespace = "http://tandberg.net/2004/02/tms/external/booking/")
@XmlSeeAlso({
    ObjectFactory.class
})
public interface BookingServiceSoap {


    /**
     * Returns the conferences for a system between two dates. The conference objects will not include list of participants, and potential webconference and recording URIs.<br>If participants info or URIs are required, use GetConferenceById to get the extended conference information<br><br>Input:<br>SystemId - An array of Ids of the systems (Based on TMS Ids)<br>StartDate - The start date of bookings <br>EndDate - The end date of bookings <br>ConferenceStatus - The status of the conference to get. E.g. AllExceptDeleted
     * 
     * @param startTime
     * @param conferenceStatus
     * @param systemIds
     * @param endTime
     * @return
     *     returns kravmaga.generated.bookingservice.ArrayOfConference
     */
    @WebMethod(operationName = "GetConferencesForSystems", action = "http://tandberg.net/2004/02/tms/external/booking/GetConferencesForSystems")
    @WebResult(name = "GetConferencesForSystemsResult", targetNamespace = "http://tandberg.net/2004/02/tms/external/booking/")
    @RequestWrapper(localName = "GetConferencesForSystems", targetNamespace = "http://tandberg.net/2004/02/tms/external/booking/", className = "kravmaga.generated.bookingservice.GetConferencesForSystems")
    @ResponseWrapper(localName = "GetConferencesForSystemsResponse", targetNamespace = "http://tandberg.net/2004/02/tms/external/booking/", className = "kravmaga.generated.bookingservice.GetConferencesForSystemsResponse")
    public ArrayOfConference getConferencesForSystems(
        @WebParam(name = "SystemIds", targetNamespace = "http://tandberg.net/2004/02/tms/external/booking/")
        List<Integer> systemIds,
        @WebParam(name = "StartTime", targetNamespace = "http://tandberg.net/2004/02/tms/external/booking/")
        XMLGregorianCalendar startTime,
        @WebParam(name = "EndTime", targetNamespace = "http://tandberg.net/2004/02/tms/external/booking/")
        XMLGregorianCalendar endTime,
        @WebParam(name = "ConferenceStatus", targetNamespace = "http://tandberg.net/2004/02/tms/external/booking/")
        ConferenceStatus conferenceStatus);

    /**
     * Returns a Conference object with the given ConferenceId. If the conference does not exist, an exception is thrown.<br><br>Input:<br>ConferenceId - The Id of the conference (Based on TMS Ids)
     * 
     * @param conferenceId
     * @return
     *     returns kravmaga.generated.bookingservice.Conference
     */
    @WebMethod(operationName = "GetConferenceById", action = "http://tandberg.net/2004/02/tms/external/booking/GetConferenceById")
    @WebResult(name = "GetConferenceByIdResult", targetNamespace = "http://tandberg.net/2004/02/tms/external/booking/")
    @RequestWrapper(localName = "GetConferenceById", targetNamespace = "http://tandberg.net/2004/02/tms/external/booking/", className = "kravmaga.generated.bookingservice.GetConferenceById")
    @ResponseWrapper(localName = "GetConferenceByIdResponse", targetNamespace = "http://tandberg.net/2004/02/tms/external/booking/", className = "kravmaga.generated.bookingservice.GetConferenceByIdResponse")
    public Conference getConferenceById(
        @WebParam(name = "ConferenceId", targetNamespace = "http://tandberg.net/2004/02/tms/external/booking/")
        int conferenceId);

    /**
     * Returns a Conference object with the given ConferenceId. If the conference does not exist, an exception is thrown.Exceptions are included.<br>Input:<br>ConferenceId - The Id of the conference (Based on TMS Ids)
     * 
     * @param conferenceId
     * @return
     *     returns kravmaga.generated.bookingservice.Conference
     */
    @WebMethod(operationName = "GetRecurrentConferenceById", action = "http://tandberg.net/2004/02/tms/external/booking/GetRecurrentConferenceById")
    @WebResult(name = "GetRecurrentConferenceByIdResult", targetNamespace = "http://tandberg.net/2004/02/tms/external/booking/")
    @RequestWrapper(localName = "GetRecurrentConferenceById", targetNamespace = "http://tandberg.net/2004/02/tms/external/booking/", className = "kravmaga.generated.bookingservice.GetRecurrentConferenceById")
    @ResponseWrapper(localName = "GetRecurrentConferenceByIdResponse", targetNamespace = "http://tandberg.net/2004/02/tms/external/booking/", className = "kravmaga.generated.bookingservice.GetRecurrentConferenceByIdResponse")
    public Conference getRecurrentConferenceById(
        @WebParam(name = "ConferenceId", targetNamespace = "http://tandberg.net/2004/02/tms/external/booking/")
        int conferenceId);

    /**
     * Returns a default Conference object filled with default values as given in Administrative Tools -> Configuration -> Conference.<br><br>Returns a Conference object filled with the default settings for a conference.
     * 
     * @return
     *     returns kravmaga.generated.bookingservice.Conference
     */
    @WebMethod(operationName = "GetDefaultConference", action = "http://tandberg.net/2004/02/tms/external/booking/GetDefaultConference")
    @WebResult(name = "GetDefaultConferenceResult", targetNamespace = "http://tandberg.net/2004/02/tms/external/booking/")
    @RequestWrapper(localName = "GetDefaultConference", targetNamespace = "http://tandberg.net/2004/02/tms/external/booking/", className = "kravmaga.generated.bookingservice.GetDefaultConference")
    @ResponseWrapper(localName = "GetDefaultConferenceResponse", targetNamespace = "http://tandberg.net/2004/02/tms/external/booking/", className = "kravmaga.generated.bookingservice.GetDefaultConferenceResponse")
    public Conference getDefaultConference();

    /**
     * Saves a conference in TMS. If conferenceId is not set, a new conference is created and saved. If the conferenceId is set, the existing conference is updated. If no conference with the given ConferenceId exists, an exception is thrown.<br><br>This method will fail if any of the participants are already booked in the same time period or if a call route is to be made, but no call route could be found.<br><br>Input:<br>Conference - the Conference object to be created/updated<br><br>Returns a Conference object updated with actual values saved in TMS.
     * 
     * @param conference
     * @return
     *     returns kravmaga.generated.bookingservice.Conference
     */
    @WebMethod(operationName = "SaveConference", action = "http://tandberg.net/2004/02/tms/external/booking/SaveConference")
    @WebResult(name = "SaveConferenceResult", targetNamespace = "http://tandberg.net/2004/02/tms/external/booking/")
    @RequestWrapper(localName = "SaveConference", targetNamespace = "http://tandberg.net/2004/02/tms/external/booking/", className = "kravmaga.generated.bookingservice.SaveConference")
    @ResponseWrapper(localName = "SaveConferenceResponse", targetNamespace = "http://tandberg.net/2004/02/tms/external/booking/", className = "kravmaga.generated.bookingservice.SaveConferenceResponse")
    public Conference saveConference(
        @WebParam(name = "Conference", targetNamespace = "http://tandberg.net/2004/02/tms/external/booking/")
        Conference conference);

    /**
     * Saves multiple conference in TMS. If conferenceId is not set, a new conference is created and saved. If the conferenceId is set, the existing conference is updated. If no conference with the given ConferenceId exists, an exception is thrown.<br><br>This method will fail if any of the participants are already booked in the same time period or if a call route is to be made, but no call route could be found.<br><br>Input:<br>Conference - the Conference objects to be created/updated<br><br>Returns Conference objects updated with actual values saved in TMS.
     * 
     * @param conferences
     * @param oneTransaction
     * @return
     *     returns kravmaga.generated.bookingservice.ArrayOfConference
     */
    @WebMethod(operationName = "SaveConferences", action = "http://tandberg.net/2004/02/tms/external/booking/SaveConferences")
    @WebResult(name = "SaveConferencesResult", targetNamespace = "http://tandberg.net/2004/02/tms/external/booking/")
    @RequestWrapper(localName = "SaveConferences", targetNamespace = "http://tandberg.net/2004/02/tms/external/booking/", className = "kravmaga.generated.bookingservice.SaveConferences")
    @ResponseWrapper(localName = "SaveConferencesResponse", targetNamespace = "http://tandberg.net/2004/02/tms/external/booking/", className = "kravmaga.generated.bookingservice.SaveConferencesResponse")
    public ArrayOfConference saveConferences(
        @WebParam(name = "Conferences", targetNamespace = "http://tandberg.net/2004/02/tms/external/booking/")
        List<Conference> conferences,
        @WebParam(name = "oneTransaction", targetNamespace = "http://tandberg.net/2004/02/tms/external/booking/")
        boolean oneTransaction);

    /**
     * Saves a conference recurrent instance in TMS. If no conference with the given ConferenceId exists, an exception is thrown.<br><br>This method will fail if any of the participants are already booked in the same time period or if a call route is to be made, but no call route could be found.<br><br>Input:<br>Conference - the Conference object to be created/updated<br><br>Returns a Conference object updated with actual values saved in TMS.
     * 
     * @param conference
     * @return
     *     returns kravmaga.generated.bookingservice.Conference
     */
    @WebMethod(operationName = "SaveConferenceRecInstance", action = "http://tandberg.net/2004/02/tms/external/booking/SaveConferenceRecInstance")
    @WebResult(name = "SaveConferenceRecInstanceResult", targetNamespace = "http://tandberg.net/2004/02/tms/external/booking/")
    @RequestWrapper(localName = "SaveConferenceRecInstance", targetNamespace = "http://tandberg.net/2004/02/tms/external/booking/", className = "kravmaga.generated.bookingservice.SaveConferenceRecInstance")
    @ResponseWrapper(localName = "SaveConferenceRecInstanceResponse", targetNamespace = "http://tandberg.net/2004/02/tms/external/booking/", className = "kravmaga.generated.bookingservice.SaveConferenceRecInstanceResponse")
    public Conference saveConferenceRecInstance(
        @WebParam(name = "Conference", targetNamespace = "http://tandberg.net/2004/02/tms/external/booking/")
        Conference conference);

    /**
     * Deletes a conference with the given ConferenceId (as defined in TMS). If the conference does not exist, an exception is thrown.<br><br>Input:<br>ConferenceId - the ConferenceId of the conference to delete.
     * 
     * @param conferenceId
     */
    @WebMethod(operationName = "DeleteConferenceById", action = "http://tandberg.net/2004/02/tms/external/booking/DeleteConferenceById")
    @RequestWrapper(localName = "DeleteConferenceById", targetNamespace = "http://tandberg.net/2004/02/tms/external/booking/", className = "kravmaga.generated.bookingservice.DeleteConferenceById")
    @ResponseWrapper(localName = "DeleteConferenceByIdResponse", targetNamespace = "http://tandberg.net/2004/02/tms/external/booking/", className = "kravmaga.generated.bookingservice.DeleteConferenceByIdResponse")
    public void deleteConferenceById(
        @WebParam(name = "ConferenceId", targetNamespace = "http://tandberg.net/2004/02/tms/external/booking/")
        int conferenceId);

    /**
     * Ends a conference with the given ConferenceId (as defined in TMS). If the conference does not exist, an exception is thrown.<br><br>Input:<br>ConferenceId - the ConferenceId of the conference to delete.
     * 
     * @param conferenceId
     */
    @WebMethod(operationName = "EndConferenceById", action = "http://tandberg.net/2004/02/tms/external/booking/EndConferenceById")
    @RequestWrapper(localName = "EndConferenceById", targetNamespace = "http://tandberg.net/2004/02/tms/external/booking/", className = "kravmaga.generated.bookingservice.EndConferenceById")
    @ResponseWrapper(localName = "EndConferenceByIdResponse", targetNamespace = "http://tandberg.net/2004/02/tms/external/booking/", className = "kravmaga.generated.bookingservice.EndConferenceByIdResponse")
    public void endConferenceById(
        @WebParam(name = "ConferenceId", targetNamespace = "http://tandberg.net/2004/02/tms/external/booking/")
        int conferenceId);

    /**
     * Deletes a conference with the given ConferenceId (as defined in TMS). If the conference does not exist, an exception is thrown.<br><br>Input:<br>ConferenceId - the ConferenceId of the conference to delete.
     * 
     * @param conferenceId
     */
    @WebMethod(operationName = "DeleteConferenceRecInstanceById", action = "http://tandberg.net/2004/02/tms/external/booking/DeleteConferenceRecInstanceById")
    @RequestWrapper(localName = "DeleteConferenceRecInstanceById", targetNamespace = "http://tandberg.net/2004/02/tms/external/booking/", className = "kravmaga.generated.bookingservice.DeleteConferenceRecInstanceById")
    @ResponseWrapper(localName = "DeleteConferenceRecInstanceByIdResponse", targetNamespace = "http://tandberg.net/2004/02/tms/external/booking/", className = "kravmaga.generated.bookingservice.DeleteConferenceRecInstanceByIdResponse")
    public void deleteConferenceRecInstanceById(
        @WebParam(name = "ConferenceId", targetNamespace = "http://tandberg.net/2004/02/tms/external/booking/")
        int conferenceId);

    /**
     * Returns a ConferenceId (as defined in TMS) given an ExternalSourceId and ExternalConferenceId. This function is used to lookup conference that have been updated in the external source, and that must be updated in TMS. The ExternalSourceId and the ExternalPrimaryKey fields must have been provided in the initial SaveConference call.<br><br>Input:<br>ExternalSourceId - Unique identifier of the external source (i.e. server IP-address).<br>ExternalConferenceId - Unique identifier of the conference within the external source (e.g. primary key in database).<br><br>Returns a ConferenceId, as defined in TMS. Can be used with e.g. GetConferenceById(...)
     * 
     * @param recurrenceIdUTC
     * @param externalSourceId
     * @param externalConferenceId
     * @return
     *     returns int
     */
    @WebMethod(operationName = "GetConferenceIdByExternalId", action = "http://tandberg.net/2004/02/tms/external/booking/GetConferenceIdByExternalId")
    @WebResult(name = "GetConferenceIdByExternalIdResult", targetNamespace = "http://tandberg.net/2004/02/tms/external/booking/")
    @RequestWrapper(localName = "GetConferenceIdByExternalId", targetNamespace = "http://tandberg.net/2004/02/tms/external/booking/", className = "kravmaga.generated.bookingservice.GetConferenceIdByExternalId")
    @ResponseWrapper(localName = "GetConferenceIdByExternalIdResponse", targetNamespace = "http://tandberg.net/2004/02/tms/external/booking/", className = "kravmaga.generated.bookingservice.GetConferenceIdByExternalIdResponse")
    public int getConferenceIdByExternalId(
        @WebParam(name = "ExternalSourceId", targetNamespace = "http://tandberg.net/2004/02/tms/external/booking/")
        String externalSourceId,
        @WebParam(name = "ExternalConferenceId", targetNamespace = "http://tandberg.net/2004/02/tms/external/booking/")
        String externalConferenceId,
        @WebParam(name = "RecurrenceIdUTC", targetNamespace = "http://tandberg.net/2004/02/tms/external/booking/")
        String recurrenceIdUTC);

    /**
     * Returns an Array of Transactions since the CurrentTransactionId. This method is used to get a list of conference creations, updated and deletes that must be performed in order to keep a mirrored conference database synchronized. The transaction with id CurrentTransactionId will not be included in the array.<br><br>Input:<br>CurrentTransactionId - The transaction id of the last commited transaction of the last synchronization.<br><br>Returns an Array of Transaction, giving the changes done since CurrentTransactionId
     * 
     * @param currentTransactionId
     * @return
     *     returns kravmaga.generated.bookingservice.ArrayOfTransaction
     */
    @WebMethod(operationName = "GetTransactionsSince", action = "http://tandberg.net/2004/02/tms/external/booking/GetTransactionsSince")
    @WebResult(name = "GetTransactionsSinceResult", targetNamespace = "http://tandberg.net/2004/02/tms/external/booking/")
    @RequestWrapper(localName = "GetTransactionsSince", targetNamespace = "http://tandberg.net/2004/02/tms/external/booking/", className = "kravmaga.generated.bookingservice.GetTransactionsSince")
    @ResponseWrapper(localName = "GetTransactionsSinceResponse", targetNamespace = "http://tandberg.net/2004/02/tms/external/booking/", className = "kravmaga.generated.bookingservice.GetTransactionsSinceResponse")
    public ArrayOfTransaction getTransactionsSince(
        @WebParam(name = "CurrentTransactionId", targetNamespace = "http://tandberg.net/2004/02/tms/external/booking/")
        int currentTransactionId);

    /**
     * Returns a list of conferences for a TMS user, between the datetimes provided as parameters. The conference objects will not include list of participants, and potential webconference and recording URIs.<br><br>Input:<br>userId - the TMS user ID<br>startDateTime - The start date of bookings <br>endDateTime - The end date of bookings <br>If UserName is not provided, the conferences owned by the logged on user will be returned.
     * 
     * @param startTime
     * @param conferenceStatus
     * @param userName
     * @param endTime
     * @return
     *     returns kravmaga.generated.bookingservice.ArrayOfConference
     */
    @WebMethod(operationName = "GetConferencesForUser", action = "http://tandberg.net/2004/02/tms/external/booking/GetConferencesForUser")
    @WebResult(name = "GetConferencesForUserResult", targetNamespace = "http://tandberg.net/2004/02/tms/external/booking/")
    @RequestWrapper(localName = "GetConferencesForUser", targetNamespace = "http://tandberg.net/2004/02/tms/external/booking/", className = "kravmaga.generated.bookingservice.GetConferencesForUser")
    @ResponseWrapper(localName = "GetConferencesForUserResponse", targetNamespace = "http://tandberg.net/2004/02/tms/external/booking/", className = "kravmaga.generated.bookingservice.GetConferencesForUserResponse")
    public ArrayOfConference getConferencesForUser(
        @WebParam(name = "UserName", targetNamespace = "http://tandberg.net/2004/02/tms/external/booking/")
        String userName,
        @WebParam(name = "StartTime", targetNamespace = "http://tandberg.net/2004/02/tms/external/booking/")
        XMLGregorianCalendar startTime,
        @WebParam(name = "EndTime", targetNamespace = "http://tandberg.net/2004/02/tms/external/booking/")
        XMLGregorianCalendar endTime,
        @WebParam(name = "ConferenceStatus", targetNamespace = "http://tandberg.net/2004/02/tms/external/booking/")
        ConferenceStatus conferenceStatus);

    /**
     * Returns a dictionary holding recording alias information for a specific user.This method is used to get a list of recording alias information to make adding a recording participant to the conference possible.<br>This method returns a dictionary, with the recording devices name as key and a list of alias information for that recording device as value.<br>If UserName is not provided, the aliases for the logged on user will be returned.
     * 
     * @param userName
     * @return
     *     returns kravmaga.generated.bookingservice.ArrayOfRecordingDevice
     */
    @WebMethod(operationName = "GetRecordingAliases", action = "http://tandberg.net/2004/02/tms/external/booking/GetRecordingAliases")
    @WebResult(name = "GetRecordingAliasesResult", targetNamespace = "http://tandberg.net/2004/02/tms/external/booking/")
    @RequestWrapper(localName = "GetRecordingAliases", targetNamespace = "http://tandberg.net/2004/02/tms/external/booking/", className = "kravmaga.generated.bookingservice.GetRecordingAliases")
    @ResponseWrapper(localName = "GetRecordingAliasesResponse", targetNamespace = "http://tandberg.net/2004/02/tms/external/booking/", className = "kravmaga.generated.bookingservice.GetRecordingAliasesResponse")
    public ArrayOfRecordingDevice getRecordingAliases(
        @WebParam(name = "UserName", targetNamespace = "http://tandberg.net/2004/02/tms/external/booking/")
        String userName);

}
